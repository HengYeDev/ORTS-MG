trigger: 
  branches:
    include:
    - Core
  paths:
    exclude: # file paths which will not trigger a build
    - Build/*
# no PR triggers
pr: none

parameters:
- name: channelName
  displayName: Build Channel
  type: string
  default: CI
  values:
  - CI
  - Dev
  - RC
  - Release

jobs:
- job: GetVersionJob
  pool:
    vmImage: 'windows-latest'
  steps:
  - checkout: self
    fetchDepth: 10 

  - task: PowerShell@2
    displayName: Get the version from directory.builds.props
    name: SetVersionTask
    inputs:
      targetType: 'inline'
      script: |
        [string] $version = (Select-Xml -Path Source\Directory.Build.props -XPath "/Project/PropertyGroup/VersionPrefix").Node.InnerText
        Write-Host "Updating the value of the codeVersion to '$version'."
        Write-Host "##vso[task.setvariable variable=versionFromCode;isOutput=true;]$version";

  - task: PowerShell@2
    displayName: Show the version
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Current versionFromCode is '$(SetVersionTask.versionFromCode)'."

- job: Build
  dependsOn: GetVersionJob
  pool:
    vmImage: 'windows-latest'

  variables:
    solution: 'Source/Orts.sln'
    buildPlatform: 'Any CPU'
    ${{if in( parameters.channelName, 'Release', 'RC' )}}: 
      buildConfiguration: 'Release'
    ${{if notin( parameters.channelName, 'Release', 'RC' )}}: 
      buildConfiguration: 'Debug'
    versionFromCode: $[dependencies.GetVersionJob.outputs['SetVersionTask.versionFromCode']]
    channelTemp: ${{ parameters.channelName }}
    channel: $[lower(variables['channelTemp'])]
    buildNumber: $[counter(format('{0}-{1}', variables['channel'], variables['versionFromCode']), 0)]
    ${{if eq( parameters.channelName, 'Release' )}}: 
      versionSuffix: '+$(Build.SourceBranchName)-$(Build.SourceVersion)'
      version: '$(versionFromCode)'
    ${{if ne( parameters.channelName, 'Release' )}}: 
      versionSuffix: '$(channel).$(buildNumber)+$(Build.SourceBranchName)-$(Build.SourceVersion)'
      version: '$(versionFromCode)-$(channel).$(buildNumber)'
    githubUrl: 'https://github.com/perpetualKid/ORTS-MG/commit/'
    downloadurl: 'https://ultimaterails.blob.core.windows.net'
    containerName: 'builds'
    versionJson: 'version.json'
    logfile: 'log-$(version).html'
    testSuffix: '+$(logfile)'

  steps:
  - checkout: self
#  - checkout: none

  - task: PowerShell@2
    displayName: Debug show the version
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Current versionFromCode is '$(versionFromCode)'."
        Write-Host "Current buildNumber is '$(buildNumber)'."
        Write-Host "Current versionSuffix is '$(versionSuffix)'."
        Write-Host "Current version is '$(version)'."
        Write-Host "Current testSuffix is '$(testSuffix)'."

  - task: NuGetToolInstaller@1
    displayName: Installing Nuget tools

  - task: NuGetCommand@2
    displayName: Restoring Nuget packages
    inputs:
      restoreSolution: '$(solution)'

  - task: PowerShell@2
    displayName: Set the name of the build and create history log 
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Setting the name of the build to '$(version)'."
        Write-Host "##vso[build.updatebuildnumber]$(version)"
        $HtmlHead = @"
        <style>
        TABLE {border-width: 1px; border-style: solid; border-color: black; border-collapse: collapse;}
        TH {border-width: 1px; padding: 3px; border-style: solid; border-color: black; background-color: #6495ED;}
        TD {border-width: 1px; padding: 3px; border-style: solid; border-color: black;}
        </style>
        <title>Commit History</title>
        "@
        $html = git log --pretty=format:"%h|%ad|%an|%s" --date=format:"%Y-%m-%d %H:%M" -100 `
        | ConvertFrom-Csv -Delimiter "|" -Header "Commit", "Date", "Author", "Message" `
        | ConvertTo-Html -Head $HtmlHead -PreContent"Open Rails Commit History Channel=$(channel) Version=$(version)" `
        -Property @{Label="Link";Expression={"<a href='$(githubUrl)$($_.Commit)'>$($_.Commit)</a>"}}, Date, Author, Message
        [System.Net.WebUtility]::HtmlDecode($html) | Out-File $(Build.ArtifactStagingDirectory)/$(logfile)

  - task: MSBuild@1
    displayName: Building the solution
    inputs:
      solution: '$(solution)'
      msbuildArchitecture: 'x64'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '-property:versionsuffix=$(testSuffix)'
  
  - task: VSTest@2
    condition: ne('${{ parameters.channelName }}', 'Release')
    displayName: Testing the solution
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: PowerShell@2
    displayName: Moving Launcher files into each version 
    inputs:
      targetType: 'inline'
      script: |
        Copy-Item -Path ".\Program.Core\net20\*" -Destination ".\Program.Core\net48\" -Recurse
        Copy-Item -Path ".\Program.Core\net20\*" -Destination ".\Program.Core\netcoreapp3.1\" -Recurse
        Remove-Item -Path ".\Program.Core\net20\" -Recurse

  - task: ArchiveFiles@2
    displayName: Creating zip archive
    inputs:
      rootFolderOrFile: './Program.Core/'
      includeRootFolder: true 
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(version).zip'
      replaceExistingArchive: true

  - task: PowerShell@2
    displayName: Create channel versions table
    inputs:
      targetType: 'inline'
      script: |
        $hash = (Get-FileHash -Path '$(Build.ArtifactStagingDirectory)/$(version).zip' -Algorithm SHA256).Hash
        $versionTable = ''
        try 
        { 
          $versionTableString = (new-object System.Net.WebClient).DownloadString('$(downloadurl)/$(containerName)/$(versionJson)')
          $versionTable = $versionTableString | ConvertFrom-Json
        }
        catch 
        { 
          try 
          { 
            $versionTableString = (new-object System.Net.WebClient).DownloadData('$(downloadurl)/$(containerName)/$(versionJson)')
            $versionTableString = [System.Text.Encoding]::Unicode.GetString($versionTableString)
            $versionTable = $versionTableString.TrimStart([char]65279) | ConvertFrom-Json
          }
          catch { $versionTable  = [PSCustomObject]@{ "channels" = @()}}
        }
        $release = $versionTable.channels | where {$_.name -eq '$(channel)'}
        $date = get-date
        $date = $date.AddTicks(-$date.Ticks % [TimeSpan]::TicksPerSecond)
        $date = $date.ToUniversalTime().ToString("o")
        if ($release -ne $null)
        {
          $release.date = $date
          $release.version = '$(version)'
          $release.hash = $hash
          $release.url = '$(downloadurl)/$(containerName)/$(versionFromCode)/$(channel)/$(version).zip'
          $release.log = '$(downloadurl)/$(containerName)/$(versionFromCode)/$(channel)/$(logfile)'          
        }
        else          
        { 
          $release = [PSCustomObject]@{name ='$(channel)'; `
            date = $date; ` 
            version = '$(version)'; `
            hash = $hash; `
            url = '$(downloadurl)/$(containerName)/$(versionFromCode)/$(channel)/$(version).zip'; `
            log = '$(downloadurl)/$(containerName)/$(versionFromCode)/$(channel)/$(logfile)' `
            }
          $versionTable.channels += $release
        }
        $json = $versionTable | ConvertTo-Json -Depth 8
        $json | Out-File $(Build.ArtifactStagingDirectory)/$(versionJson)

  - task: AzureFileCopy@3
    displayName: Uploading the binaries to Azure
    inputs:
      SourcePath: '$(Build.ArtifactStagingDirectory)/$(version).zip'
      ConnectedServiceNameARM: 'UltimateRails ARM Blob Storage'
      Destination: 'AzureBlob'
      StorageAccountRM: 'ultimaterails'
      ContainerName: '$(containerName)'
      BlobPrefix: '$(versionFromCode)/$(channel)'

  - task: AzureFileCopy@3
    displayName: Uploading history logs to Azure
    inputs:
      SourcePath: '$(Build.ArtifactStagingDirectory)'
      ConnectedServiceNameARM: 'UltimateRails ARM Blob Storage'
      Destination: 'AzureBlob'
      StorageAccountRM: 'ultimaterails'
      ContainerName: '$(containerName)'
      BlobPrefix: '$(versionFromCode)/$(channel)'
      additionalArgumentsForBlobCopy: '/Pattern:*.html /Y /SetContentType:text/html'

  - task: AzureFileCopy@3
    displayName: Uploading version table to Azure
    inputs:
      SourcePath: '$(Build.ArtifactStagingDirectory)'
      ConnectedServiceNameARM: 'UltimateRails ARM Blob Storage'
      Destination: 'AzureBlob'
      StorageAccountRM: 'ultimaterails'
      ContainerName: '$(containerName)'
      additionalArgumentsForBlobCopy: '/Pattern:$(versionJson) /Y /SetContentType:application/json'